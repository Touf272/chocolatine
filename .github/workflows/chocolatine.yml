name: chocolatine

on:
  push:
    branches-ignore: "ga-ignore-*"
  pull_request:
    branches-ignore: "ga-ignore-*"

env:
  EXECUTABLES: ""
  MIRROR_URL: ""

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: coding_style_checker
        run: |
          check.sh $(pwd) $(pwd)
          if [ -s coding-style-reports.log ]; then
            file_name="coding-style-reports.log"
            while read -r line; do
              title=$( echo "$line" | cut -d':' -f3 )
              file=$( echo "$line" | cut -d':' -f1 )
              prec=$( echo "$line" | cut -d':' -f2 )
              msg=$( echo "$line" | cut -d':' -f4 )
              echo "::error title=$title coding style error,file=$file, line=$prec:: $msg"
            done < $file_name
            exit 1
          fi
          exit 0

  check_program_compilation:
    needs: [check_coding_style]
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: make
        timeout-minutes: 2
        run: |
          make
      - name: make clean
        run: make clean
      - name: checking executables
        run: |
          while [ $EXECUTABLES != $string ]; do
              string=$( echo "$EXECUTABLES" | cut -d';' -f1 )
              if [ ! -x "$string" ]; then
                exit 1
              fi
              EXECUTABLES=$( echo "$EXECUTABLES" | cut -d';' -f2- )
          done
          exit 0

  run_tests:
    needs: [check_program_compilation]
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: run tests
        timeout-minutes: 2
        run: make tests_run

  push_to_mirror:
    #needs: [run_tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}